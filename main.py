# -*- coding: utf-8 -*-
"""Download YouTube Subtitles via youtube-dl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bcq-KMcCVXtx0JoDLe3NzDaAk1nsdfdx

# How to download YouTube Subtitles for Sentimental Analysis

**The main steps in this notebook are:**

* Download the subtitles file(s)
* Convert to a text file
* Clean the text and remove duplications
* Export to a text file


**Subtitle Settings available via youtube-dl:**

* --write-sub (Write subtitle file)
* --write-auto-sub (Write automatic subtitle file (YouTube only))
* --all-subs (Download all the available subtitles of the video)
* --list-subs (List all available subtitles for the video)
* --sub-format (FORMAT Subtitle format, accepts formats preference, for example: "srt" or "ass/srt/best")
* --sub-lang LANGS (Languages of the subtitles to download (optional) separated by commas, use IETF language tags like 'en,pt')

**Want to learn more Python?**

*If you’re interested in learning Python and executing all the cool automated projects you have swirling in your head then [DataCamp’s platform is perfect for you](https://www.datacamp.com?tap_a=5644-dce66f&tap_s=1243242-e9a1cb&utm_medium=affiliate&utm_source=seyiagboola). I think the best part isn’t the 355+ courses from Python, SQL or Tableau but the mobile app to practice on, a live community to hold you accountable and skill assessments to perfect your skills.*
"""

#See official github page for this module at https://github.com/ytdl-org/youtube-dl/
#Download module to your Colab
!pip install youtube-dl

"""# Insert YouTube URL and Subtitles Settings"""

from __future__ import unicode_literals
import youtube_dl

ydl_opts = {
'writesubtitles': True,
'writeautomaticsub': True,
'subtitle': '--write-sub --sub-lang en',
'skip_download': True, 
}
url = input("Please add YouTube link here:")
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download([url])
print("Download Successful!")

"""This module is very good an responsive. For example, it identified that there was no official subtitles which is very common. Luckily we can extract YouTube's automated subtitles which isn't perfect but is close enough.

Once the download is successful, open the folder icon on the right hand side, right click and "Copy Path".

# Convert Subtitles file to Text File
"""

#Taken from https://shkspr.mobi/blog/2018/09/convert-webvtt-to-a-transcript-using-python/
#https://github.com/glut23/webvtt-py
!pip install webvtt-py
import webvtt

#Copy the path of thwe downloaded subtitles file here
file = "/content/A$AP Rocky - Praise The Lord (Da Shine) (Official Video) ft. Skepta-Kbj2Zss-5GY.en.vtt"
#Read the webvtt Subtitles file
vtt = webvtt.read(file) 
counter = 0
for i in range(len(vtt)):
  if counter < 10:
    print(vtt[i].text)
    counter+=1

"""# Remove duplicates from Subtitles

Above you should see duplicates if you have downloaded the automated subtitles.

The code below will remove duplicates but if there's no duplicates, it will just organise the text into one paragraph.
"""

#I want to convert YouTube’s auto-generated subtitles into a plain transcript.
#https://stackoverflow.com/questions/51784232/how-do-i-convert-the-webvtt-format-to-plain-text

# import webvtt
# vtt = webvtt.read('subtitles.vtt')
transcript = ""

lines = []
for line in vtt:
    # Strip the newlines from the end of the text.
    # Split the string if it has a newline in the middle
    # Add the lines to an array
    lines.extend(line.text.strip().splitlines())

# Remove repeated lines
previous = None
for line in lines:
    if line == previous:
       continue
    transcript += " " + line
    previous = line

print(transcript)

"""# Save to Text File"""

text_file = open("Text_File_Name_Edit_Here.txt", "w")
n = text_file.write(transcript)
text_file.close()
